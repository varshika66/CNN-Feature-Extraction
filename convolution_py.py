# -*- coding: utf-8 -*-
"""Convolution.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dLfbCZlIVB199pMc7RBMqq2I9LTjcOqw
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Conv2D, Input
from tensorflow.keras.models import Sequential

# Define the 5x5 input matrix
input_matrix = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25]
], dtype=np.float32)

# Reshape to fit Conv2D input format (batch_size, height, width, channels)
input_tensor = input_matrix.reshape(1, 5, 5, 1)

# Define the 3x3 kernel
kernel = np.array([
    [0, 1, 0],
    [1, -4, 1],
    [0, 1, 0]
], dtype=np.float32).reshape(3, 3, 1, 1)  # Reshape to (height, width, in_channels, out_channels)

# Function to perform convolution with different parameters
def perform_convolution(stride, padding):
    model = Sequential([
        Input(shape=(5, 5, 1)),  # Use an explicit Input layer
        Conv2D(filters=1, kernel_size=(3, 3), strides=(stride, stride), padding=padding,
               kernel_initializer=tf.constant_initializer(kernel), use_bias=False)
    ])
    output = model.predict(input_tensor)
    return output.squeeze()  # Remove extra dimensions

# Perform convolutions with different settings
output_valid_s1 = perform_convolution(stride=1, padding='valid')
output_same_s1 = perform_convolution(stride=1, padding='same')
output_valid_s2 = perform_convolution(stride=2, padding='valid')
output_same_s2 = perform_convolution(stride=2, padding='same')

# Print the output feature maps
print("Output (Stride=1, Padding='VALID'):\n", output_valid_s1)
print("\nOutput (Stride=1, Padding='SAME'):\n", output_same_s1)
print("\nOutput (Stride=2, Padding='VALID'):\n", output_valid_s2)
print("\nOutput (Stride=2, Padding='SAME'):\n", output_same_s2)
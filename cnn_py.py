# -*- coding: utf-8 -*-
"""CNN.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VwibeIiGF9xWY4mbsLH8XiaABHAthG07
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.layers import MaxPooling2D, AveragePooling2D

# Task 1: Edge Detection Using Sobel Filter
def sobel_edge_detection(image_path):
    # Load image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Check if the image was loaded properly
    if image is None:
        print("Error: Image not loaded. Check the file path.")
        return

    # Apply Sobel filter in x and y directions
    sobel_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    sobel_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)

    # Display images
    plt.figure(figsize=(10, 4))
    plt.subplot(1, 3, 1)
    plt.imshow(image, cmap='gray')
    plt.title("Original Image")
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.imshow(sobel_x, cmap='gray')
    plt.title("Sobel-X")
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.imshow(sobel_y, cmap='gray')
    plt.title("Sobel-Y")
    plt.axis('off')

    plt.show()


# Task 2: Implement Max Pooling and Average Pooling

def pooling_operations():
    # Create a random 4x4 matrix
    # Changed dtype to np.int32 which is supported by np.random.randint
    input_matrix = np.random.randint(0, 256, (1, 4, 4, 1), dtype=np.int32)
    # Cast the input matrix to np.float32 to work with the pooling layers.
    input_matrix = input_matrix.astype(np.float32)

    # Define max pooling and average pooling layers
    max_pool = MaxPooling2D(pool_size=(2, 2))
    avg_pool = AveragePooling2D(pool_size=(2, 2))

    # Apply pooling
    max_pooled = max_pool(input_matrix).numpy().squeeze()
    avg_pooled = avg_pool(input_matrix).numpy().squeeze()

    # Print results
    print("Original Matrix:\n", input_matrix.squeeze())
    print("\nMax Pooled Matrix (2x2):\n", max_pooled)
    print("\nAverage Pooled Matrix (2x2):\n", avg_pooled)

# Run the functions
# Check to see if the image file exists. If it does not, then create a dummy one.
import os
image_path = '/mnt/data/image.png'
if not os.path.exists(image_path):
    os.makedirs(os.path.dirname(image_path), exist_ok=True)
    dummy_image = np.zeros((100, 100), dtype=np.uint8)
    cv2.imwrite(image_path, dummy_image)
sobel_edge_detection(image_path)
pooling_operations()